// Generated by CoffeeScript 1.4.0
(function() {
  var GameState, PAPER, PaperRockScissors, ROCK, SCISSORS, WinnerStatus;

  Array.prototype.remove = function(e) {
    var t, _ref;
    if ((t = this.indexOf(e)) > -1) {
      return ([].splice.apply(this, [t, t - t + 1].concat(_ref = [])), _ref);
    }
  };

  GameState = {
    GAME_UNSTARTED: 0,
    GAME_IN_PROGRESS: 1,
    GAME_SUSPENDED: 2,
    GAME_TERMINATED: 3
  };

  WinnerStatus = {
    UNDETERMINED: 0,
    WINNER: 1,
    LOSER: 2
  };

  PaperRockScissors = (function() {

    function PaperRockScissors(gameScheduler, gameDivision) {
      var _this = this;
      this.gameDivision = gameDivision;
      this.previousGameDivisionState = "";
      this.player1Choice = "";
      this.player2Choice = "";
      this.currentPlayer = 1;
      this.gameWinner = 0;
      this.currentGameState = GameState.GAME_UNSTARTED;
      this.registeredSuspendCallbacks = new Array();
      this.registeredTerminationCallbacks = new Array();
      this.registerSuspendEvents = function(callback) {
        console.log("Register callback for suspend events");
        return _this.registeredSuspendCallbacks.push(callback);
      };
      this.unregisterSuspendEvents = function(callback) {
        console.log("Unregister callback for suspend events");
        return _this.registeredSuspendCallbacks.remove(callback);
      };
      this.registerTerminateEvents = function(callback) {
        console.log("Register callback for terminate events");
        return _this.registeredTerminationCallbacks.push(callback);
      };
      this.unregisterTerminateEvents = function(callback) {
        console.log("Register callback for terminate events");
        return _this.registeredTerminationCallbacks.remove(callback);
      };
      this.getCurrentPlayer = function() {
        return _this.currentPlayer;
      };
      this.clickEventHandler = function() {
        var cellId, playerId, touchPosInCanvas, winner;
        console.log("Click Event Called");
        if (_this.getGameState() === GameState.GAME_IN_PROGRESS) {
          touchPosInCanvas = getElementPositionFromEvent(_this.canvas.canvas, touchevent.targetTouches[0]);
          cellId = _this.determineCellSelected(touchPosInCanvas.x, touchPosInCanvas.y);
          console.log("CellId: " + cellId);
          playerId = _this.getCurrentPlayer();
          if (playerId === 1) {
            _this.drawX(_this.canvas, cellId);
          } else {
            _this.drawO(_this.canvas, cellId);
          }
          winner = _this.updateWinner(cellId, playerId);
          if (winner > 0) {
            return _this.announceWinner(winner);
          } else {
            return _this.decideTurn();
          }
        }
      };
      this.initialize = function() {
        var newButton;
        newButton = document.createElement("input");
        newButton.setAttribute("type", "button");
        newButton.setAttribute("value", "Rock");
        newButton.setAttribute("name", "RockButton");
        newButton.addEventListener('click', _this.onRock, false);
        _this.gameDivision.appendChild(newButton);
        _this.rockButton = newButton;
        newButton = document.createElement("input");
        newButton.setAttribute("type", "button");
        newButton.setAttribute("value", "Paper");
        newButton.setAttribute("name", "PaperButton");
        newButton.addEventListener('click', _this.onPaper, false);
        _this.gameDivision.appendChild(newButton);
        _this.paperButton = newButton;
        newButton = document.createElement("input");
        newButton.setAttribute("type", "button");
        newButton.setAttribute("value", "Scissors");
        newButton.setAttribute("name", "ScissorsButton");
        newButton.addEventListener('click', _this.onScissors, false);
        _this.gameDivision.appendChild(newButton);
        _this.scissorsButton = newButton;
        _this.currentGameState = GameState.GAME_IN_PROGRESS;
        return _this.gameWinner = 0;
      };
      this.checkForWinner = function(cellId, playerId) {
        console.log("Checking for Winner");
        return _this.gameWinner;
      };
      this.decideTurn = function() {
        console.log("Determining Next Player Turn");
        if (this.currentPlayer === 1) {
          this.currentPlayer = 2;
        } else {
          this.currentPlayer = 1;
        }
        return this.currentPlayer;
      };
      this.announceWinner = function(playerId) {
        console.log("Announcing Winner");
        return alert("Player " + playerId + " wins!");
      };
      this.getGameResult = function() {
        var winnerStatus;
        console.log("Retrieving game result");
        winnerStatus = WinnerStatus.UNDETERMINED;
        if (_this.currentGameState === GameState.GAME_TERMINATED) {
          winnerStatus = WinnerStatus.WINNER;
        }
        return winnerStatus;
      };
      this.addMiniGameToScheduler = function() {
        return console.log("Adding Mini-Game");
      };
      this.getGameState = function() {
        console.log("Retrieving game state");
        return this.currentGameState;
      };
      this.updatePlayerChoice = function(playerId, choice) {
        if (playerId === 1) {
          _this.player1Choice = choice;
          return _this.decideTurn();
        } else {
          _this.player2Choice = choice;
          return _this.determineWinner(_this.player1Choice, _this.player2Choice);
        }
      };
      this.determineWinner = function(player1Choice, player2Choice) {
        var winStatement;
        if (_this.gameWinner === 0) {
          if (player1Choice === player2Choice) {
            alert("Tie. " + player1Choice + " chosen by both. " + "New Round!");
            return _this.decideTurn();
          } else if (player1Choice === ROCK) {
            if (player2Choice === SCISSORS) {
              winStatement = "Rock crushes scissors.";
              alert(winStatement + " " + "Player 1 wins!");
              _this.gameWinner = 1;
            } else {
              winStatement = "Paper covers rock.";
              alert(winStatement + " " + "Player 2 wins!");
              _this.gameWinner = 2;
            }
            return _this.terminate();
          } else if (player1Choice === PAPER) {
            if (player2Choice === ROCK) {
              winStatement = "Paper covers rock.";
              alert(winStatement + " " + "Player 1 wins!");
              _this.gameWinner = 1;
            } else {
              winStatement = "Scissors cut paper.";
              alert(winStatement + " " + "Player 2 wins!");
              _this.gameWinner = 2;
            }
            return _this.terminate();
          } else if (player1Choice === SCISSORS) {
            if (player2Choice === PAPER) {
              winStatement = "Scissors cut paper.";
              alert(winStatement + " " + "Player 1 wins!");
              _this.gameWinner = 1;
            } else {
              winStatement = "Rock crushes scissors.";
              alert(winStatement + " " + "Player 2 wins!");
              _this.gameWinner = 2;
            }
            return _this.terminate();
          }
        }
      };
      this.resume = function(previousWinnerState, previousPlayerId) {
        console.log("Resuming game");
        if (_this.currentGameState === GameState.GAME_UNSTARTED) {
          return _this.initialize();
        } else {
          _this.rockButton.style.display = _this.prevButtonVisibility;
          _this.paperButton.style.display = _this.prevButtonVisibility;
          _this.scissorsButton.style.display = _this.prevButtonVisibility;
          return _this.currentGameState = GameState.GAME_IN_PROGRESS;
        }
      };
      this.suspend = function() {
        var callback, idx, _i, _ref, _results;
        console.log("Suspending game");
        _this.prevButtonVisibility = _this.rockButton.style.display;
        _this.rockButton.style.display = 'none';
        _this.paperButton.style.display = 'none';
        _this.scissorsButton.style.display = 'none';
        _this.currentGameState = GameState.GAME_SUSPENDED;
        _results = [];
        for (idx = _i = 0, _ref = _this.registeredSuspendCallbacks.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; idx = 0 <= _ref ? ++_i : --_i) {
          callback = _this.registeredSuspendCallbacks[idx];
          _results.push(callback(_this));
        }
        return _results;
      };
      this.terminate = function() {
        var callback, idx, _i, _ref, _results;
        console.log("Terminating game");
        _this.prevButtonVisibility = _this.rockButton.style.display;
        _this.rockButton.style.display = 'none';
        _this.paperButton.style.display = 'none';
        _this.scissorsButton.style.display = 'none';
        _this.currentGameState = GameState.GAME_TERMINATED;
        _results = [];
        for (idx = _i = 0, _ref = _this.registeredTerminationCallbacks.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; idx = 0 <= _ref ? ++_i : --_i) {
          callback = _this.registeredTerminationCallbacks[idx];
          _results.push(callback(_this));
        }
        return _results;
      };
      this.onRock = function() {
        return _this.updatePlayerChoice(_this.getCurrentPlayer(), ROCK);
      };
      this.onPaper = function() {
        return _this.updatePlayerChoice(_this.getCurrentPlayer(), PAPER);
      };
      this.onScissors = function() {
        return _this.updatePlayerChoice(_this.getCurrentPlayer(), SCISSORS);
      };
    }

    return PaperRockScissors;

  })();

  ROCK = "Rock";

  PAPER = "Paper";

  SCISSORS = "Scissors";

  if (typeof module !== "undefined" && module.exports) {
    exports.PaperRockScissors = PaperRockScissors;
  } else {
    window.PaperRockScissors = PaperRockScissors;
  }

}).call(this);
